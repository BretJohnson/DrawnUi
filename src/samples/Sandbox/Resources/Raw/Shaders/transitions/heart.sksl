uniform float ratio; // width / height
uniform float progress; // 0.0 - 1.0
uniform shader iImage1; // Texture
uniform shader iImage2; // Texture for backside
uniform float2 iOffset; // Top-left corner of DrawingRect
uniform float2 iResolution; // Viewport resolution (pixels)
uniform float2 iImageResolution; // iImage1 resolution (pixels)

vec4 getFromColor(vec2 uv) {
    // Adjust UV coordinates to match the image resolution
    vec2 adjustedUV = uv * iImageResolution;
    return iImage1.eval(adjustedUV);
}

vec4 getToColor(vec2 uv) {
    // Adjust UV coordinates to match the image resolution
    vec2 adjustedUV = uv * iImageResolution;
    return iImage2.eval(adjustedUV);
}

// Author: gre
// License: MIT

float inHeart(vec2 p, vec2 center, float size) {
    if (size == 0.0) return 0.0;
    vec2 o = (p - center) / (1.6 * size);
    o.y = -o.y; // Flip the vertical coordinate
    float a = o.x * o.x + o.y * o.y - 0.3;
    return step(a * a * a, o.x * o.x * o.y * o.y * o.y);
}

vec4 transition(vec2 uv) {
    return mix(
        getFromColor(uv),
        getToColor(uv),
        inHeart(uv, vec2(0.5, 0.6), progress)
    );
}

half4 main(float2 fragCoord) {
    // Normalize the coordinates
    float2 normCoord = (fragCoord - iOffset) / iResolution;
    half4 fragColor = transition(normCoord);
    return fragColor;
}