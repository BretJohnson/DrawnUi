uniform float ratio; // width / height
uniform float progress; // 0.0 - 1.0
uniform shader iImage1; // Texture
uniform shader iImage2; // Texture for backside
uniform float2 iOffset; // Top-left corner of DrawingRect
uniform float2 iResolution; // Viewport resolution (pixels)
uniform float2 iImageResolution; // iImage1 resolution (pixels)

// Usage: fromStep and toStep must be in [0.0, 1.0] range 
// and all(fromStep) must be < all(toStep)
vec4 fromStep = vec4(0.0, 0.2, 0.4, 0.0);
vec4 toStep = vec4(0.6, 0.8, 1.0, 1.0);

vec4 getFromColor(vec2 uv) {
    // Adjust UV coordinates to match the image resolution
    vec2 adjustedUV = uv * iImageResolution;
    return iImage1.eval(adjustedUV);
}

vec4 getToColor(vec2 uv) {
    // Adjust UV coordinates to match the image resolution
    vec2 adjustedUV = uv * iImageResolution;
    return iImage2.eval(adjustedUV);
}

// Author: gre
// License: MIT

vec4 transition (vec2 uv) {
  vec4 a = getFromColor(uv);
  vec4 b = getToColor(uv);
  return mix(a, b, smoothstep(fromStep, toStep, vec4(progress)));
}

half4 main(float2 fragCoord) {
    // Normalize the coordinates
    float2 normCoord = (fragCoord - iOffset) / iResolution;
    half4 fragColor = transition(normCoord);
    return fragColor;
}